import random
import csv

# Function to generate a random hash value
def generate_hash():
    hash_length = 32
    hash_characters = '0123456789abcdef'
    return ''.join(random.choice(hash_characters) for _ in range(hash_length))

# Function to generate a faulty or malicious file record
def generate_faulty_record(millisecond):
    hash_value = generate_hash()
    classification = 0
    state = 0
    usage_counter = 0
    prio = random.randint(10000, 15000)
    static_prio = 0
    normal_prio = 0
    policy = 0
    vm_pgoff = 0
    vm_truncate_count = random.randint(10000, 15000)
    task_size = 0
    cached_hole_size = 0
    free_area_cache = 0
    mm_users = random.randint(10, 100)
    map_count = random.randint(500, 1000)
    hiwater_rss = 0
    total_vm = random.randint(1000000, 2000000)
    shared_vm = 0
    exec_vm = 0
    reserved_vm = 0
    nr_ptes = random.randint(1000, 2000)
    end_data = 0
    last_interval = 0
    nvcsw = random.randint(3000, 5000)
    nivcsw = random.randint(3000, 5000)
    min_flt = 0
    maj_flt = 0
    fs_excl_counter = 0
    lock = 0
    utime = 0
    stime = 0
    gtime = 0
    cgtime = 0
    signal_nvcsw = 0

    record = [hash_value, millisecond, classification, state, usage_counter, prio, static_prio, normal_prio, policy, vm_pgoff, vm_truncate_count, task_size, cached_hole_size, free_area_cache, mm_users, map_count, hiwater_rss, total_vm, shared_vm, exec_vm, reserved_vm, nr_ptes, end_data, last_interval, nvcsw, nivcsw, min_flt, maj_flt, fs_excl_counter, lock, utime, stime, gtime, cgtime, signal_nvcsw]
    return record

# Function to save faulty records to a CSV file
def save_faulty_records_as_csv(file_name, records):
    with open(file_name, 'w', newline='') as file:
        writer = csv.writer(file, delimiter=',')
        # Write column headers
        writer.writerow(["hash", "millisecond",  "state", "usage_counter", "prio", "static_prio", "normal_prio", "policy", "vm_pgoff", "vm_truncate_count", "task_size", "cached_hole_size", "free_area_cache", "mm_users", "map_count", "hiwater_rss", "total_vm", "shared_vm", "exec_vm", "reserved_vm", "nr_ptes", "end_data", "last_interval", "nvcsw", "nivcsw", "min_flt", "maj_flt", "fs_excl_counter", "lock", "utime", "stime", "gtime", "cgtime", "signal_nvcsw"])
        # Write records
        writer.writerows(records)

# Generate 1000 faulty records
millisecond_values = range(1000)
faulty_records = [generate_faulty_record(millisecond) for millisecond in millisecond_values]

# Save the faulty records to a CSV file
save_faulty_records_as_csv('faulty_records.csv', faulty_records)

print("1000 faulty records saved successfully as CSV.")
